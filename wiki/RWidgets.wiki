#summary OWRpy: The parent class of R widgets

= Introduction =
OWRpy is the parent class for every widget that wants access to the R session. It initiates a R session using the rpy class. 

 * Initializes the R session
  *RPATH environment variable must be set to the home directory of R 
  *ideally done by the r-orange installer, coming later. 
 * Provides the interface between orange and the R session.
 * Manges R variables
 * Manges and installs needed R libraries 
 * Cleans up R session on widget delete


=Specifications=
== Class Attributes ==
 * variable_suffix: A unique identifier for each widget used to identify R variables and their parent widgets.
 * Rvariables: a dictionary which holds all the R object names used by the widget
== Class Methods == 
 * rsession: the wrapper around rpy class used to communicate with the R session
  * Wraps a progress bar around each R session call
  * outputs every call to R
 * require_librarys: use this class to load R packages
  * will install if does not exist
 * setRvariableNames: takes a list of variables names in creates unique R variable names
 * convertDataframeToExampleTable: convert a data frame into an orange exampleTable.

=Example=

{{{
# The OWRpy is required for very R widget
from OWRpy import *

class newRWidget(OWRpy):

     #a set of variable names that will be saved 
     #all ways have 'variable_suffix' to maintain proper connection between the schema and R session
    settingsList = ['variable_suffix']

    def __init__(self, parent=None, signalManager=None):
        #initialize OWRpy and all base widget functionality
        OWRpy.__init__(self,parent, signalManager, "File", wantMainArea = 0, resizingEnabled = 1)

        #Method to create all R variable names that will be used by this widget
        #this variables are saved in self.Rvariables
        #self.Rvariables should be used to access all R session variables
        self.setRvariableNames(['dataframe','filename'])
        
        #Method to load all required libraries
        #If the libraries do not exist they are installed
        self.require_librarys(['affy'])

        #signals
        self.inputs = None
        self.outputs = [("data.frame", orange.Variable)]

.
.
.
}}}