#summary A discription of the structure of the program and how data is passed between widgets

= Introduction =

r-orange is a three tiered platform for data visualization and mining.  The system combines the visual appeal of orange (running on PyQt) with the logical power of Python and the statistical power of R.  

The user interacts with the data at the orange level where PyQt and orange widgets facilitate selection of options and data handling.  Options are often prepopulated making data interaction easier.  Orange interacts with the Python level where Python acts as a logic engine handling variable types, assignment of options, presetting of options, &c.  Finally, Python directs calls to the R level through rpy where R generates variables and performs statistical processing as well as handling data structure and some low-level plotting.

Essentially all "data" is stored at the R level in the form of variables that are created by Python.  Python then hands dict's of variable names to later widgets at the orange level.  We have established some guidelines for the construction of these dict's so that widgets will be able to interact normally.

Sent elements:
  * All dicts that are passed contain a *'data'* element.  This is entended to be the first thing that is called by down-stream widgets.  Data is a list, usually of length 1 containing a string specifying an R variable.  Of particular note, 'data' *must always be of the data.frame type* in R, most widgets are designed to recognize data.frames as the 'data' object.  Those that do not recognize 'data' as the incoming object must take their input from some other key in the dict that is sent to them.  Some may require other types of elements but they will extract those elements from other items in the dict.
  * Other elements in the dict may be named accordingly, in future this document may contain some common dict names (ex: 'eset') and a discription of them
  * The elements that are not 'data' are entended to help downstream widgets to collect data that may be pertinent to them to preset options so that the user does not need to.  Widgets should be created to override this wherever possible so that the infromation can be included at the orange level.

== Example ==

self.vs = self.VARIABLE_SUFFIX
self.inputs = [("My R Data", orange.Variable, self.process)] # indicates incoming data and performs process when data is connected
self.data = {} # establish the variable data in self.
self.result = 'result'+self.vs

def process(self, data):
  if data:
    self.data = data
  else: return

## now make something happen with the data, remember that data doesn't actually contain data, but rather a pointer to the data in R

r(self.result+'<-somefunction('+self.data['data']+')')
self.newdata = self.data.copy() #this is nessisary because just setting = self.data will cause data to be modified as well which will distroy data in all upstream widgets.  This could one day be a useful feature but we think that it is quite dangerous at the moment.
self.newdata['data'] = [self.result]
#optional
self.newdata['incommingdata'+self.vs] = self.data['data']
self.send("My R Result", self.newdata)


