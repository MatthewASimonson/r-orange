<html>

<head>
<title>obiGsea: Gene Set Enrichment Analysis</title>
<link rel=stylesheet href="../style.css" type="text/css">
<link rel=stylesheet href="style-print.css" type="text/css" media=print>
</head>

<body>
<h1>obiGsea: Gene Set Enrichment Analysis</h1>
<index name="modules/gene set enrichment analysis">

<p>Gene Set Enrichment Analysis (GSEA) is a method which tries to identify groups of genes that are
regulated together. It is implemented in module obiGsea, which is included in Orange for Functional Genomics package.
To use obiGsea you need to install Orange for Functional Genomics.</p>

<p>GSEA takes gene
expression data for multiple samples with their phenotypes and computes
gene set enrichment for given gene sets. To use it run
<code>runGSEA</code> method with the following arguments:</p>

<h2>runGSEA</h2>
<index name="gsea">
<index name="GSEA">
<index name="gene+set">

<p class=section>Arguments</p>
<dl class=arguments>

  <dt>data</dt>
  <dd>An <A href="ExampleTable.htm"><CODE>ExampleTable</CODE></A> with gene expression data. An example
  should correspond to a sample with its phenotype (class value). Attributes represent individual genes. Their names 
  should be meaningful gene aliases.</dd>

  <dt>organism</dt>
  <dd>Organism code as used in KEGG. Needed for matching gene names in data to those in gene sets. Some
  examples: <code>hsa</code> for human, <code>mmu</code> for mouse. This is an required argument.</dd> 

  <dt>classValues</dt>
  <dd>A pair of class values describing phenotypes that are chosen as two distinct phenotypes on which gene correlations
  are computed. Only examples with one of chosen class values are considered for analysis. If not specified, first
  two class values in <code>classVar</code> attribute descriptor are used.</dd>

  <dt>geneSets</dt>
  <dd>A python dictionary of gene sets, where key is a gene set name which points to a list of gene aliases for genes
  in the gene set. Default: gene sets in your collection directory.</dd>

  <dt>n</dt>
  <dd>GSEA computes gene set significance by permutation tests. This parameter specifies the number
  of permutations. Default: 100.</dd>

  <dt>permutation</dt>
  <dd>Type of permutation. If <code>"class"</code>, class values (phenotypes) are permuted. This is the default. 
  However, if number of samples is small (less than 10), it is advisable to use <code>"gene"</code> permutations even
  though they ignore gene-gene interactions.</dd>

  <dt>minSize, maxSize</dt>
  <dd>Minimum and maximum number of genes from gene set also present in the data set for that gene set to be analysed.
  Defaults: 3 and 1000.</dd>

  <dt>minPart</dt>
  <dd>Minimum fraction of genes from the gene set also present in the data set for that gene set to be analysed. Default: 0.1.</dd> 

  <dt>atLeast</dt>
  <dd>Number of valid attribute values for each class value needed for a certain atribute (gene) to be considered in analysis. Attributes failing to meet this criterium are ignored. Default: 3.</dd>

</dl>

<!-- es, nes, pval, fdr, os, ts, genes -->

Method <code>runGSEA</code> returns a dictionary where key is a gene set label and its value a dictionary
of:
<ul>
<li> enrichment score (key <code>es</code>),
<li> normalised enrichment score (key <code>nes</code>),
<li> P-value (key <code>p</code>),
<li> FDR (key <code>fdr</code>),
<li> whole gene set size (key <code>size</code>),
<li> number of matched genes from the gene set (key <code>matched_size</code>),
<li> gene names from the data set for matched genes from the gene set (key <code>genes</code>).
</ul>

<p>A note on gene name matching. Gene name matching is performed with the help of KEGG database. 
A gene from a gene set is tried to be matched with a gene from the data set. If an alias for a gene from the
gene set is the same as an alias for a gene in the data set, then those aliases are matched. If not,
it is checked if gene alias from the gene set and gene alias from the data set are both gene
aliases of the same gene according to KEGG database for a given organism. If they are, we have a match.</p>

<h3>Example 1</h3>

<p>We present a simple usage example. Data used here are not gene expression
data. For the method to work we had to specify our own sets of attributes that seem to "belong together".</p>

<p class="header"><a href="gsea1.py">gsea1.py</a> (uses <a href=
"http://www.ailab.si/orange/doc/datasets/iris.tab">iris.tab</a>)</p>

<xmp class=code>import orange, obiGsea

data = orange.ExampleTable("iris")

gen1 = dict([
    ("sepal",["sepal length", "sepal width"]),
    ("petal",["petal length", "petal width", "petal color"])
    ])

res = obiGsea.runGSEA(data, organism="hsa", minSize=2, geneSets=gen1)
print "%5s  %6s %6s %s" % ("LABEL", "NES", "P-VAL", "GENES")
for name,resu in res.items():
    print "%5s  %6.3f %6.3f %s" % (name, resu[1], resu[2], str(resu[6]))

</xmp>

<p>Corresponding output:</p>

<xmp class=code>LABEL     NES  P-VAL GENES
petal  -1.125  0.732 ['petal length', 'petal width']
sepal   1.080  0.623 ['sepal length', 'sepal width']
</xmp>

<p>We can see that a "gene" labelled "petal color" was not used, because it couldn't be matched to any attribute in the data set.</p>

<h3>Example 2: directly using correlation data</h3>

<p>
GSEA can also directly use correlation data between individual genes and a phenotype. Two kinds of input data trigger this functionality: (1) input data with only one example (attribute names are gene names) or (2) there is only one continuous attribute in the given data set's domain. In latter case gene correlations are read from the continuous attribute and the gene names are taken from the first <code>StringVariable</code> in the domain. We have choosen the latter representation for this example, since this is the formatting returned by <code>obiDicty</code> module. Only results for ten pathways are listed.
</p>

<p class="header"><a href="gsea1.py">gsea2.py</a></p>

<xmp class=code>import obiDicty
import obiGeneSets
import obiGsea
import orange

dbc = obiDicty.DatabaseConnection("http://asterix.fri.uni-lj.si/microarray/api/index.php?")
data = dbc.getData(sample='pkaC-', time="8")[0] #get first chip

print "First 10 examples"
for ex in data[:10]:
    print ex

genesets =  obiGeneSets.collections([":go:ddi", ":kegg:ddi"])
res = obiGsea.runGSEA(data, organism="ddi", minPart=0.05, geneSets=genesets, permutation="gene")

print "GSEA results"
print "%-40s %6s %6s %6s %7s" % ("LABEL", "NES", "P-VAL", "SIZE", "MATCHED") 
for name,resu in res.items()[:10]: 
    print "%-40s %6.3f %6.3f %6d %7d" % (name[:30], resu[1], resu[2], resu[4], resu[5]) 

</xmp>

<p>Corresponding output:</p>

<xmp class=code>First 10 examples
[-0.071], {"DDB":'#*'}
[0.003], {"DDB":'#17S_ribosomal_gene'}
[-0.168], {"DDB":'#B-elongation_factor'}
[-0.134], {"DDB":'DDB0185195'}
[0.330], {"DDB":'DDB0201657'}
[0.229], {"DDB":'DDB0232075'}
[0.108], {"DDB":'DDB0231519'}
[-0.272], {"DDB":'DDB0231642'}
[0.189], {"DDB":'DDB0186491'}
[0.082], {"DDB":'DDB0191349'}
GSEA results
LABEL                                       NES  P-VAL   SIZE MATCHED
[GO MF] cation transmembrane t            1.457  0.025    100      27
[GO BP] cell cycle process               -0.987  0.429     51      16
[GO CC] cortical cytoskeleton             1.681  0.000     19      15
[GO CC] membrane coat                     0.726  0.927     28      17
[GO BP] regulation of actin fi            1.366  0.062     26      19
[GO MF] transferase activity,            -1.227  0.250     94      13
[GO BP] localization of cell              1.285  0.091     97      49
[GO BP] tetrapyrrole biosynthe           -0.787  0.745     11       5
[GO CC] AP-type membrane coat             0.640  0.773      6       4
[GO BP] tyrosine metabolic pro           -0.535  0.962      5       5
</xmp>



<HR>
<H2>References</H2>

<P>Subramanian, Aravind   and Tamayo, Pablo   and Mootha, Vamsi  K.  and Mukherjee, Sayan   and Ebert, Benjamin  L.  and Gillette, Michael  A.  and Paulovich, Amanda   and Pomeroy, Scott  L.  and Golub, Todd  R.  and Lander, Eric  S.  and Mesirov, Jill  P. Gene set enrichment analysis: A knowledge-based approach for interpreting genome-wide expression profiles. PNAS, 2005.</P>

</body>
</html>

